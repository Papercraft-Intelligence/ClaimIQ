@page "/claims"
@using ClaimIq.Web.Services
@using ClaimIq.Domain.Models
@inject ClaimsService ClaimsService

<PageTitle>Claims Dashboard - ClaimIQ</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    
    <!-- üî• HERO SECTION -->
    <MudPaper Class="hero-section mb-6" Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 20px; padding: 3rem; color: white;">
        <MudGrid AlignItems="Center">
            <MudItem xs="12" md="8">
                <MudStack>
                    <MudText Typo="Typo.h2" Style="font-weight: 700;">
                        <MudIcon Icon="Icons.Material.Filled.Assessment" Class="mr-3" Size="Size.Large" />
                        Claims Dashboard
                    </MudText>
                    <MudText Typo="Typo.h6" Style="opacity: 0.9;">
                        üìù Claims Management
                    </MudText>
                </MudStack>
            </MudItem>
            <MudItem xs="12" md="4" Class="text-right">
                <!-- üî• FIX: Use MudBadge instead -->
                <MudBadge Content="@claims.Count" Color="Color.Success" Overlap="true">
                    <MudButton Variant="Variant.Text" Style="color: white; font-weight: 600;">
                        <MudIcon Icon="Icons.Material.Filled.TrendingUp" Class="mr-2" />
                        Active Claims
                    </MudButton>
                </MudBadge>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- üî• EXISTING CONTENT -->
    @if (isLoading)
    {
        <MudStack Row AlignItems="AlignItems.Center" Class="pa-4">
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
            <MudText Class="ml-3" Typo="Typo.h6">Loading claims...</MudText>
        </MudStack>
    }
    else if (claims.Any())
    {
        <MudGrid>
            @foreach (var claim in claims)
            {
                <MudItem xs="12" md="6" lg="4">
                    <MudCard Class="mb-4" Style="border-radius: 16px; box-shadow: 0 8px 25px rgba(0,0,0,0.15); transition: all 0.3s ease;">
                        <MudCardContent>
                            <MudStack>
                                <!-- üî• FIX: Use MudText with styling instead -->
                                <MudText Typo="Typo.body2" 
                                         Style="background: #667eea; color: white; padding: 4px 12px; border-radius: 12px; width: fit-content; font-weight: 600;">
                                    @claim.ClaimNumber
                                </MudText>
                                
                                <MudText Typo="Typo.h6" Style="font-weight: 600;">@claim.PolicyHolderName</MudText>
                                <MudText Typo="Typo.body2" Style="color: #666;">@claim.IncidentType</MudText>
                                <MudText Typo="Typo.h5" Color="Color.Primary" Style="font-weight: 700;">
                                    @claim.IncurredAmount.ToString("C")
                                </MudText>
                                
                                <!-- üî• FIX: Use MudText with dynamic styling -->
                                <MudText Typo="Typo.body2" 
                                         Style="@GetStatusStyle(claim.Status.ToString())">
                                    @claim.Status
                                </MudText>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <MudAlert Severity="Severity.Info" Style="border-radius: 12px;">
            No claims found. Time to celebrate! üéâ
        </MudAlert>
    }
</MudContainer>

@code {
    private List<InsuranceClaim> claims = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadClaims();
    }

    private async Task LoadClaims()
    {
        try
        {
            claims = await ClaimsService.GetClaimsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    // üî• FIX: Replace GetStatusColor with GetStatusStyle
    private string GetStatusStyle(string status) => status.ToLower() switch
    {
        "open" => "background: #ff9800; color: white; padding: 4px 12px; border-radius: 12px; width: fit-content; font-weight: 600;",
        "closed" => "background: #4caf50; color: white; padding: 4px 12px; border-radius: 12px; width: fit-content; font-weight: 600;",
        "pending" => "background: #2196f3; color: white; padding: 4px 12px; border-radius: 12px; width: fit-content; font-weight: 600;",
        "investigating" => "background: #9c27b0; color: white; padding: 4px 12px; border-radius: 12px; width: fit-content; font-weight: 600;",
        _ => "background: #757575; color: white; padding: 4px 12px; border-radius: 12px; width: fit-content; font-weight: 600;"
    };
}